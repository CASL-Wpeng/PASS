
#include "spiral_storage.h"
#include "../../common/hash.h"
#include "zipfian_int_distribution.hpp"
#include <vector>
#include <fstream>
#include <random>
#include <bitset>

// pool path and name
static const char *pool_name = "pmem_hash.data";
//static const char *pool_name = "../../../../../mnt/pmem0/wpeng/pmem_spiral.data";
// pool size
static const size_t pool_size = 1024ul * 1024 * 10ul;

#define READ_WRITE_NUM 500

const Value_t DEFAULT = reinterpret_cast<Value_t>(1);


static bool FileExists(const char *pool_path) {
  struct stat buffer;
  if (stat(pool_path, &buffer) == 0){
	remove(pool_name);
  }
  return 0;
}

const uint32_t kNumBucket = 32;
const uint32_t kFingerBits = 8;

constexpr uint32_t shiftBits = (31 - __builtin_clz(kNumBucket)) + kFingerBits;
constexpr size_t bucketMask = ((1 << (31 - __builtin_clz(kNumBucket))) - 1);

#define BUCKET_INDEX(hash) (((hash) >> (64 - shiftBits)) & bucketMask)
#define META_HASH(hash) ((uint8_t)((hash) >> (64 - kFingerBits)))



  void bin(uint64_t n)
  {
    uint64_t i;
    cout << "0";
    for (i = 1 << 30; i > 0; i = i / 2)
    {
      if((n & i) != 0)
      {
        cout << "1";
      }
      else
      {
        cout << "0";
      }
    }
	cout << endl;
  }

extern "C" hash_api *create_tree(const tree_options_t &opt, unsigned sz, unsigned tnum)
{
  if (sz)
    sz = sz;
  else
    sz = 65536;
  // Step 1: create (if not exist) and open the pool
  bool file_exist = false;
  if (FileExists(pool_name)) file_exist = true;
  
  if (!file_exist){
		PMEMobjpool *pop;
    	pop = pmemobj_create(pool_name, "Spiral Storage", 1024 * 1024 * 32UL, 0666);
    	if (pop == NULL) {
			perror(pool_name);
			exit(1);
		}
		    //size_t segment_number = (size_t)argv[1];
    size_t init_size = sz >= 2 ? sz : 2;
    PMEMoid root = pmemobj_root(pop, sizeof (SpiralStorage));
		struct SpiralStorage *rootp = (SpiralStorage*)pmemobj_direct(root);
    new (rootp) SpiralStorage();
		rootp->init_Spiral(pop,rootp,init_size);
		if (rootp == NULL)
		{
			perror("Pointer error");
			exit(1);
		}
  cout << "Return the pointer to Spiral Storage" << std::endl;
  return rootp;
  }
  cout << "error" << std::endl;
  return NULL;
}


inline int fastrand(unsigned int g_seed) { 
  g_seed = (214013*g_seed+2531011); 
  return (g_seed>>16)&0x7FFF; 
} 


uint64_t logical_to_physical(uint64_t logical){
    uint64_t high = (1 + logical)/2;
    uint64_t low = logical/2;
    uint64_t physical;
    if (low < high){
        physical = logical_to_physical(low);
    }
    else {
        physical = logical - low; 
    }
    return physical;
}

double zipfianDistribution(double alpha, int n) {
    static std::random_device rd;
    static std::mt19937 gen(rd());
   
    std::uniform_real_distribution<double> dis(0.0, 1.0);

    double sum = 0.0;
    for (int i = 1; i <= n; ++i) {
        sum += 1.0 / std::pow(i, alpha);
    }

    double zipfian_value = 0.0;
    double target = dis(gen) * sum;

    for (int i = 1; i <= n; ++i) {
        zipfian_value += 1.0 / std::pow(i, alpha);
        if (zipfian_value >= target) {
            return static_cast<double>(i) / n;
        }
    }

    // This should not be reached
    return 0.0;
}

void showBits(const long double& value) {
    // Create a pointer to the long double variable
    const unsigned char* bytes = reinterpret_cast<const unsigned char*>(&value);

    // Display each byte and its bits
    for (int i = sizeof(long double) - 1; i >= 0; --i) {
        for (int j = 7; j >= 0; --j) {
            std::cout << ((bytes[i] >> j) & 1);
        }
        std::cout << ' ';
    }
    std::cout << std::endl;
}

struct string_key{
    int length;
    char key[0];
};


class zipfian_key_generator_t{
public:
    zipfian_key_generator_t(size_t start, size_t end, float skew) : dist_(start, end, skew), generator_(time(0)){

    }

    uint64_t next_uint64(){
        return dist_(generator_);
    }

private:
    std::default_random_engine generator_;
    zipfian_int_distribution<uint64_t> dist_;
};



int main(int argc, char *argv[]){
    // Example usage
    double alpha = 0.7; // Zipfian distribution parameter
    int n = 1000;       // Number of elements in the distribution

    double* sample_array = static_cast<double*>(std::malloc(n * sizeof(double)));
    //double *sample_array = new double[n];
    zipfian_key_generator_t *key_generator = new zipfian_key_generator_t(1,n,0.8);

    for (uint64_t i = 0; i < n; ++i) {
      double sample = (double)key_generator->next_uint64()/n;
      //std::cout << sample << std::endl;
      if(i % 100000 == 0){
        std::cout << sample << std::endl;
      }
		  sample_array[i] = sample;
    }

    std::ofstream outputFile("output.txt");

    // Check if the file is open
    if (outputFile.is_open()) {
        // Output array elements to the file
        for (uint64_t i = 0; i < n; ++i) {
            outputFile << sample_array[i] << "\n";
        }

        // Close the file
        outputFile.close();
        std::cout << "Array has been written to output.txt\n";
    } else {
        std::cerr << "Unable to open file for writing\n";
    }

	size_t sizeofBits = sizeof(long double) *8;
	std::cout << sizeofBits << std::endl;

	long double myLongDouble = 3.141592653589793238L;

	std::cout << "Original long double: " << myLongDouble << std::endl;

    // Display the bits of the long double variable
    std::cout << "Bits representation of long double: ";
    showBits(myLongDouble);

    union {
        long double ld;
        uint64_t bits[2];
    } converter;

    converter.ld = myLongDouble;

    // Convert the long double to a std::bitset
    std::bitset<sizeof(long double) * 8> bits(converter.bits[0]);

    // Output the original bits
    std::cout << "Original bits: " << bits << std::endl;

    // Change the last 4 bits to a specific value
    bits &= ~(0xFULL);  // Clear the last 4 bits
    bits |= 0x5ULL;     // Set the last 4 bits to 0101 (5 in hexadecimal)

    // Output the modified bits
    std::cout << "Modified bits: " << bits << std::endl;

    // Convert the std::bitset back to a long double
    converter.bits[0] = bits.to_ullong();
    long double modifiedLongDouble = converter.ld;

    // Output the modified long double
    std::cout << "Modified long double: " << modifiedLongDouble << std::endl;

	showBits(myLongDouble);
	showBits(modifiedLongDouble);

	int word_num = 2;
  int length = 16;
	uint64_t *_key = reinterpret_cast<uint64_t *>(malloc(word_num * sizeof(uint64_t)));

  string_key* myStringKey = reinterpret_cast<string_key*>(malloc(length + sizeof(string_key)));

  myStringKey->length = length;

  memcpy(myStringKey->key, converter.bits, 16);

  for(int i = 0; i < 16;i++){
    std::cout << myStringKey->key[i]<< std::endl;
  }
  std::memcpy(converter.bits, myStringKey->key, sizeof(long double));

  std::cout << "Modified long double: " << converter.ld << std::endl; 

  return 0;

}